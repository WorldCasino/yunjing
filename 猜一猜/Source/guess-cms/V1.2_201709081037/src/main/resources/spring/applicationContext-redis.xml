<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:redis="http://www.springframework.org/schema/redis"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-34.0.xsd
                            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                            http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
                            http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd">
	<description>spring-data-redis配置</description>

	<!--redis数据库连接-->
	<bean id="redisConnectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"/>
		<property name="password" value="${redis.password}"/>
		<property name="port" value="${redis.port}"/>
		<property name="usePool" value="true"/>
		<property name="poolConfig" ref="jedisPoolConfig"/>
	</bean>

	<!--消息序列化-->
	<bean id="jdkSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory"/>
		<!--所有序列化换成StringRedisSerializer，不然会乱码-->
		<property name="stringSerializer" ref ="jdkSerializer"/>
		<property name="keySerializer" ref="jdkSerializer"/>
		<property name="valueSerializer" ref="jdkSerializer"/>
		<property name="hashKeySerializer" ref="jdkSerializer"/>
		<property name="hashValueSerializer" ref="jdkSerializer"/>
	</bean>

	<!--消息监听器-->
	<bean id="queueMessageListener" class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
		<property name="delegate" ref="redisMessageQueueListener" />
		<property name="serializer" ref="jdkSerializer" />
	</bean>

	<!--消息生产者-->
	<bean id="sendMessage" class="com.cicada.redis.MessageQueueProducer">
		<property name="redisTemplate" ref="redisTemplate"/>
	</bean>

	<redis:listener-container>
        <!--监听多个频道 用空格隔开，__keyevent@0__:expired 这个是REDIS提供的键过期事件通知-->
        <redis:listener ref="queueMessageListener" method="handleMessage" serializer="jdkSerializer" topic="operate_queue_online lottery_queue_online CHAT_MESSAGE __keyevent@0__:expired" />
	</redis:listener-container>

	<!-- jedis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" /> <!-- 最大能够保持idel状态的对象数  -->
		<property name="maxWaitMillis" value="${redis.maxWait}" /> <!-- 最大的等待时间 -->
		<property name="maxTotal" value="${redis.maxTotal}" /> <!-- 最大分配的对象数 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}"/> <!-- 在borrow一个jedis实例时，是否提前进行validate操作，如果为true，则得到的jedis实例均是可用的 -->
		<property name="testOnReturn" value="true"/> <!-- 在return一个jedis实例时，是否提前进行validate操作 -->
	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" />
		<constructor-arg index="2" value="${redis.port}" type="int" />
		<!--TIMEOUT-->
		<constructor-arg index="3" value="10000" type="int"/>
		<!--AUTH-->
		<constructor-arg index="4" value="${redis.password}"/>
	</bean>

</beans>